{"meta":{"title":"Hexo","subtitle":null,"description":"Shawn的Hexo博客","author":"Shawn","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2019-07-06T17:20:31.000Z","updated":"2019-07-06T17:21:41.507Z","comments":true,"path":"2019/07/07/我的第一篇文章/","link":"","permalink":"http://yoursite.com/2019/07/07/我的第一篇文章/","excerpt":"","text":"算法描述总体思想：将数组元素分为已排好的有序区间和待排区间，起初已排区间只有一个元素即数组的第一个元素，然后在待排区间内依次取出元素并按照已排区间从后向前的顺序依次进行比较并插入到合适位置，使得插入后仍保持已排区间的有序性，直到所有待排区间为空，算法结束。（过程类似于摸扑克牌，手牌为已排元素，待抓的底牌为待排元素，依次抓取排序底牌并插入手牌中，直到待抓底牌为空）说明： 插入排序属于稳定的排序方法 算法步骤 首先数组第一个元素认为已排好序。 取出下一个元素，并与已排好序区间中的元素从后向前比较 直到找到比该元素小或者相等（包含等于的情况，保证算法的稳定性）的那个元素 将该元素插入到那个元素的后面 重复步骤2~4，直到所有的待排区间为空算法实现（C++版）12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;//插入排序算法void Isert_sort(vector&lt;int&gt;&amp; vec) &#123; for (int i = 1; i &lt; vec.size(); ++i) &#123; //从第二个元素开始扫描，第一个元素默认已排好 int temp = vec[i]; //将待排序元素取出存入临时变量 int j = i - 1; //指向已排区间的最后一个元素 while (j &gt;= 0 &amp;&amp; vec[j] &gt; temp) &#123; //找到比待插入元素小或者等于的那个元素位置，相等的情况也跳出（只有大于的情况才进行移动），保证了算法的稳定性 vec[j + 1] = vec[j]; //将比待排元素大的元素依次向后移位 --j; &#125; vec[j + 1] = temp; //将待插入元素插入到比它小或者等于的那个元素位置的后面 &#125; return;&#125;;void Print(vector&lt;int&gt; vec) &#123; for (int i = 0; i &lt; vec.size(); ++i) &#123; cout &lt;&lt; vec[i] &lt;&lt; ' '; &#125; cout &lt;&lt; endl; return;&#125;int main() &#123; vector&lt;int&gt; vec = &#123; 6, 2, 1, 5, 8, 7, 4, 3, 0, 9&#125;; Print(vec); Isert_sort(vec); Print(vec); return 0;&#125; 运行结果： 复杂度分析最坏复杂度O(n²)：当初始数组完全逆序的时候，为最坏情况，需要比较并移动的总次数为：1+2+3+…+(n-1)=n(n-1)/2最好复杂度(n)：当初始数组完全顺序的时候，为最好情况，需比较的次数为n-1;平均复杂度O(n²)：每次需比价移动次数为已排序区间的一半n(n-1)/4","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-06T16:56:42.628Z","updated":"2019-07-06T16:56:42.628Z","comments":true,"path":"2019/07/07/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}